// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DIRECT_URL") // uses a direct connection
}

model User {
  user_id     String   @id @default(uuid()) @db.Uuid
  nama        String   @db.VarChar(20)
  email       String   @unique @db.VarChar(64)
  telepon     String?  @db.VarChar(20)
  gender      Gender?
  role        Role     @default(pengunjung)
  foto        String?  @db.Text
  ktp         String?  @db.Text
  dibuat_pada DateTime @default(now())
  // updated_at DateTime @default(now()) @updatedAt

  token      Token[]
  notifikasi Notifikasi[]
  transaksi  Transaksi[]

  @@map("user")
}

model Token {
  token_id    String    @id @default(uuid()) @db.Uuid
  user_id     String    @db.Uuid
  user        User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  token       String    @db.VarChar(400)
  tipe        TokenType
  kedaluwarsa DateTime?

  @@map("token")
}

model Kamar {
  kamar_id Int         @id @default(autoincrement())
  nama     String      @db.VarChar(20)
  harga    Int         @db.Integer
  status   StatusKamar @default(kosong)
  gambar   String?     @db.Text
  cabang   Cabang

  transaksi Transaksi[]

  @@map("kamar")
}

model Notifikasi {
  notifikasi_id Int              @id @default(autoincrement())
  user_id       String           @db.Uuid
  user          User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  judul         String           @db.VarChar(20)
  deskripsi     String           @db.VarChar(250)
  status        StatusNotifikasi @default(terkirim)
  dibuat_pada   DateTime         @default(now())

  @@map("notifikasi")
}

model Transaksi {
  transaksi_id String          @id @default(uuid()) @db.Uuid
  user_id      String          @db.Uuid
  user         User            @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  kamar_id     Int             @db.Integer
  kamar        Kamar           @relation(fields: [kamar_id], references: [kamar_id], onDelete: Cascade)
  total        Int             @db.Integer
  status       StatusTransaksi @default(pending)
  token        String          @db.Uuid
  dibuat_pada  DateTime        @default(now())

  @@map("transaksi")
}

enum Role {
  admin
  penyewa
  pengunjung
}

enum Gender {
  laki_laki
  perempuan
}

enum TokenType {
  access
  refresh
  notification
}

enum Cabang {
  denpasar
  klungkung
}

enum StatusKamar {
  terisi
  kosong
}

enum StatusNotifikasi {
  terkirim
  dibaca
}

enum StatusTransaksi {
  pending
  settlement
}
